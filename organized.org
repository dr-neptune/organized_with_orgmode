#+SEQ_TODO: NEXT(n) TODO(t) WAITING(w) SOMEDAY(s) IN-PROG(p) REPEAT(r) | DONE(d) CANCELLED(c)
#+STARTUP: nologrepeat
#+TAGS: DEPTH(d) IMPLEMENT(i) SKIM(s) ONE-TIME(o)

* Getting Yourself Organized with Org-mode

1. Write it down (capture)
2. Decide if its actionable or not
3. If it is actionable and too big, break it down into smaller tasks
4. Decide the very next action to move towards "Done"
5. /Do the actions/
6. Frequently review the system

#+TITLE: The Basics of Org Mode
* Headlines & Outline Mode

** Level 1 Headline
*** Level 2 Headline A
   
    Some text belonging to the level 2
   
*** Level 2 Headline B

    Some other text belonging to the level 2

* To-Do Keywords

*** TODO Thing 1 that needs to be done
*** IN-PROG Thing 2 that needs to be done
*** WAITING Thing 3 that needs to be done
*** DONE Thing 4 that needs to be done
    CLOSED: [2020-12-03 Thu 21:30]
    
   


We can define custom keywords by adding the header:

#+SEQ_TODO: NEXT(n) TODO(t) WAITING(w) SOMEDAY(s) PROJ(p) | DONE(d) CANCELLED(c)

*** NEXT Thing 1 that needs to be done
*** TODO Thing 2 that needs to be done
*** WAITING Thing 3 that needs to be done
*** SOMEDAY Thing 4 that needs to be done
*** PROJ Thing 5 that needs to be done
*** DONE Thing 6 that needs to be done
    CLOSED: [2020-12-03 Thu 21:33]
*** CANCELLED Thing 7 that needs to be done
    CLOSED: [2020-12-03 Thu 21:33]

The | symbol means that everything on the left side of it are considered actionable items. The symbols on the right side mark finished items. 
The item in the () is a hot-key that can be activated by using C-c C-t inside of an item

*** NEXT Item to do

* Schedule, Deadlines, & Agenda View

** task #1 
   SCHEDULED: <2020-12-06 Sun>
** task #2
   SCHEDULED: <2020-12-31 Thu> DEADLINE: <2021-01-01 Fri>
** task #3 
   SCHEDULED: <2020-12-08 Tue>
** task #4 
   DEADLINE: <2020-12-07 Mon>

* Repeating Tasks

** REPEAT Example Task
   SCHEDULED: <2020-12-05 Tue ++1w>

** Specifying Intervals

We can use the following units to specify the repeat interlude: d (days) w (weeks) m (months) y (year

A single + means that the timestamp will be rescheduled by the interval when the task is marked as done. 
A ++ means reschedule it in the future. It should carry on that time interval
A .+ means take the current date, and add the time unit to it

We can remove the repeating log entries with 
#+STARTUP: nologrepeat

* Checklists

** NEXT Easy peasy checklist [0/5]
- [ ] Do thing 1
- [ ] Do thing 2
- [ ] Do thing 3
- [ ] Do thing 4
- [ ] Do thing 5


** NEXT Easy peasy checklist 2 [70%]
- [X] Do thing 1
- [X] Do thing 2
- [X] Do thing 3
- [X] Do thing 4
- [X] Do thing 5
- [ ] Do thing 6
- [ ] Do thing 7
- [X] Do thing 8
- [ ] Do thing 9
- [X] Do thing 10

#+TITLE: Advanced Topics

* Tags

Tags are a label for headlines. They add contexts to tasks. 

We can define a set of tags at the beginning of the file. 

#+TAGS: DEPTH(d) IMPLEMENT(i) SKIM(s) ONE-TIME(o)

To assign a tag to a headline, place the cursor in the headline or the block below it and press C-c C-q

** NEXT Example Task 1                                                :DEPTH:
** NEXT Example Task 2                                            :IMPLEMENT:
** Example Task 3                                                      :SKIM:
** Example Task 4                                                     :DEPTH:
** NEXT Example Task 5                                                :DEPTH:

You can assign a free-text tag as well by pressing tab in the options tray

** Example Task 6                                                 :EasyPeasy:

Tags can also be written with an inherited hierarchy

** Example Task 7                                               :MAINTENANCE:
*** Example Task 8                                          :DEPTH:IMPLEMENT:

* Advanced Agenda Views

*** Agenda for Current Week or Day

We can set the default timespan of the agenda view by setting the variable `org-agenda-span` to day, week, month, year.

The other way we can do it is with prefixing of the agenda command. Prefixing is done with C-u and a number. 

So C-u 3 C-c a will call the agenda for 3 days

*** List of all TODO Entries

We can list all the TODO entries by calling C-c a t

We can look at different flags with the N r syntax

*** Entries with a Special TODO Keyword

If we choose shift-t, we can choose multiples. For example, we could do NEXT|TODO to see all the next and todo keywords. 

*** Match a TAGS/PROP/TODO query

C-c a m will give us the opportunity to enter tags and logical expressions

We could look up tags like MAINTENANCE or DEPTH, or things like 

MAINTENANCE|DEPTH="NEXT"

*** Searching for keywords

C-c a s does full text search terms. It also supports regular expressions. 

The regular expressions are wrapped in curly braces like {a?Apostol}

* Customized Agenda Views

These are two ways to define customized agenda views: 

** Custom Agenda View Editor 

C-a a s-c

** Directly in the startup file 

We can write out views with the variable org-agenda-custom-commands.

Here is an example: 

#+BEGIN_SRC emacs-lisp
'(org-agenda-custom-commands
   '(("A" "Agenda and all NEXTs" tags-todo "DEPTH|IMPLEMENT=\"NEXT\""
      ((org-agenda-span 'day)))
     ("n" "Agenda and all TODOs"
      ((agenda "" nil)
       (alltodo "" nil))
      nil)))
#+END_SRC

* Drawers, Logging, and Quick Notes

Drawers start with a line that has the name of the drawer between colons (:), and are usually written in uppercase. 

There are some reserved names for drawers:

:PROPERTIES:
:END:
This holds special config info on the current item or subtree in the org file. It has to start immediately below the headline. 

:LOGBOOK:
:END:
This is used to log things. 


:OTHER:
Here is some stuff in the drawer
:END:

** What is logging good for?

Logging means we can create a sort of micro-blog for every task that we are doing. Its also a good CYA strategy

:LOGBOOK:
- Note taken on [2020-12-08 Tue 21:04] \\
  Here is another note, with an update
- Note taken on [2020-12-08 Tue 21:04] \\
  This is a test showing that I can log a note inside of a logbook drawer
:END:

** Taking a quick note

When the cursor is inside of a task or even on a line with the task in an agenda view, we can just type C-c C-z to open a window where we can write a note. 

   - Note taken on [2020-12-08 Tue 20:56] \\
     This is a quick note

* Archiving

Org offers two archiving methods: 

*Internal Archiving* just sets an :ARCHIVE: tag which disables expanding that entry and prevents it from showing in agendas. This is done with C-c C-x a

** Example Task                                                     :ARCHIVE:

Stuff done here 

:LOGBOOK:
- Note taken on [2020-12-08 Tue 21:08] \\
  This is a quick note about what was done here
:END:

*Moving Subtrees* means we move the subtree to another file, the archive file. This keeps the org file lean and mean

** Moving Subtrees to an Archive File

We define an archive file like this: 
#+ARCHIVE: %s_archive::

where %s is the filename of the org file

#+ARCHIVE: archive.org_archive::

We can also set the archive target for a subtree. For example: 

** Books to read 
:PROPERTIES:
:ARCHIVE: read-books.org::* Read Books
:END:

*** Yet Another Book Read (YABR)

mhm 

** Revisiting Archive Files

If we wish to search our archives, we could just use grep since it is all plain text

We can also swap to the archive file we know it is in, then switch to the agenda dispatcher C-c a, then < to activate "Buffer, subtree/region restriction" to make it only apply to the current window, then press 's' to search the agenda for what we are looking for.

#+TITLE: Making Things More Smooth

* Automatic Logging of Status Changes

This will have the system prompt us for a comment when a task occurs. 

#+SEQ_TODO: NEXT(n) TODO(t@/!) WAITING(w) SOMEDAY(s) IN-PROG(p) REPEAT(r) | DONE(d) CANCELLED(c)

The @ indicates that we want to log a timestamp and a note when we change the keyword to TODO. The ! defines that we want to log a time stamp when we change the keyword from TODO to something else

** TODO Something to do
   :LOGBOOK:
   - State "TODO"       from "WAITING"    [2020-12-09 Wed 21:34] \\
     This thing still must be done
   - State "WAITING"    from "TODO"       [2020-12-09 Wed 21:34]
   - State "TODO"       from "NEXT"       [2020-12-09 Wed 21:34] \\
     This is a thing that must be done
   :END:

** Disabling automatic logging for a task

If we want to disable logging, especially for repeating tasks, then we can add a line to the PROPERTIES drawer: 

:PROPERTIES:
:LOGGING:
:END:

** IN-PROG Variables that influence automatic logging

*org-log-done* defined if tasks that are finished will create a logbook entry 
*org-log-reschedule* defines if we want to create a log entry whenever we reschedule a task

* Splitting Your System Into Several Files

If we wanted to split one big org file into multiple little ones, we could just copy the items into distinct files -- or we could go deeper into refiling.

** Customizing Refiling

We need to customize 3 variables for an elegant way to refile items: 

*** org-refile-targets

This defines where refiling can place items. 

*** org-refile-use-outline-path

This needs to be set to file which means we see the target path including the file name of the org-file where we are placing the item

*** org-refile-allow-creating-parent-nodes

This defines if we are allowed to create new parent headlines in the target file. We set this to confirm  if the target we entered would create a new headline

** example work thing 1
** example work thing 2
** example home thing 1 
** example home thing 3
** example work thing 3
** example home thing 2
** example work thing 4
** example home thing 4

If we want to move the entries to other org files, we can use C-c C-w and choose the target. If we want to copy them, then we could do C-c M-w

We can also set our agenda files to only include one or the other, or both with this elisp:

#+BEGIN_SRC emacs-lisp
(defun org-focus-private()
  "Set focus on private things"
  (setq org-agenda-files '("~/Documents/org/private.org")))

(defun org-focus-work()
  "Set focus on work things"
  (setq org-agenda-files '("~/Documents/org/work.org")))

(defun org-focus-all()
  "Set focus on all the things"
  (setq org-agenda-files '("~/Documents/org/private.org" "~/Documents/org/work.org")))
#+END_SRC

* The First Capture Template

With capture templates, we can define forms to capture our ideas in a smart way

I bound the key to C-c c. You need to define an org template. In this case, here is the template I used for a work todo: 

* TODO %^{Description} :NEW:
  Desired Outcome: %?
:LOGBOOK:
- Added: %U
:END:

We could also do this in elisp like so: 

#+BEGIN_SRC emacs-lisp
;; capture templates
(setq org-capture-templates
      '(("W" "Work Templates")
	("Wt" "work todo" entry
	 (file+headline "~/Documents/org/organized_org/professional.org" "Scratch")
	 (file "~/Documents/org/organized_org/wcap.org"))
	("P" "Personal Templates")
	("Pt" "Personal Todo" entry
	 (file+headline "~/Documents/org/study.org" "Scratch")
	 (file "~/Documents/org/organized_org/ptodo.org"))
	("Pb" "Personal Book" entry
	 (file+headline "~/Documents/org/organized_org/book-review.org" "Books")
	 "* %U - %^{Title}\nComments: %?")
	("Pi" "Idea" entry
	 (file+headline "~/Documents/org/organized_org/idea-scratch.org" "Idea")
	 "* %U - %^{Title}\nComments: %?")))
#+END_SRC


#+TITLE: Workflows and Time Tracking

* Ordered Tasks

In this section we learn how to enforce that tasks are completed in a predefined order

Suppose we have the following:

** DONE Build A House [100%]                                        :ORDERED:
   CLOSED: [2020-12-17 Thu 19:05]
   :PROPERTIES:
   :ORDERED:  t
   :END:
   - State "NEXT"       from "TODO"       [2020-12-17 Thu 19:04]
*** DONE Build the basement
    CLOSED: [2020-12-17 Thu 19:02] SCHEDULED: <2020-12-17 Thu>
    - State "WAITING"    from "TODO"       [2020-12-17 Thu 19:02]
*** DONE Build the ground floor
    CLOSED: [2020-12-17 Thu 19:04] SCHEDULED: <2020-12-18 Fri>
*** DONE Build the roof
    CLOSED: [2020-12-17 Thu 19:04] SCHEDULED: <2020-12-19 Sat>
*** DONE Build out doors and windows
    CLOSED: [2020-12-17 Thu 19:04]
- [X] Doors
- [X] Windows

 We can add a special property called ordered which is placed on the parent task. The keybinding is C-c C-x shift-O

#+BEGIN_SRC emacs-lisp
;; set up an ordered tag when ordered is called
(setq org-track-ordered-property-with-tag 1)

;; block the parent task from being marked done if subtasks aren't completed
(setq org-enforce-todo-dependencies t)
(setq org-enforce-todo-checkbox-dependencies t)
#+END_SRC

* Timers

The key binding for starting a countdown timer is *C-c C-x ;*
There is also a count up timer: *C-c C-x 0*
We can pause timers: *C-c C-x ,*
and resume them with the same binding 
If we want to stop the timer, we prefix it with C-u -- so *C-u C-c C-x ,*


We can insert 
simple timestamps  with *C-c C-x .* 0:00:00 0:00:07
descriptive timestamps with C-c C-x - 
- 0:00:48 :: task 1
- 0:00:55 :: task 2
- 0:00:59 :: task 3
- 0:01:01 :: task 4
- 0:01:40 :: task 5

* Clocking

This is helpful for knowing how long tasks take. It could also be useful in the future if I want to charge by the hour for tasks (i.e. contract work or timesheet work).

To clock in, place the cursor on a task and press C-c C-x C-i (like clock in)
To clock out, we do C-c C-x C-o (like clock out)
If you accidentally clocked into the wrong task, you can cancel the clock with C-c C-x C-q


** Example Task 1 
   :LOGBOOK:
   CLOCK: [2020-12-17 Thu 19:38]--[2020-12-17 Thu 20:08] =>  0:30
   CLOCK: [2020-12-17 Thu 19:33]--[2020-12-17 Thu 19:34] =>  0:01
   :END:
** Example Task 2 
   :LOGBOOK:
   CLOCK: [2020-12-17 Thu 19:37]--[2020-12-17 Thu 19:38] =>  0:01
   CLOCK: [2020-12-17 Thu 19:37]--[2020-12-17 Thu 19:37] =>  0:00
   CLOCK: [2020-12-17 Thu 19:35]--[2020-12-17 Thu 19:36] =>  0:01 
   :END:

We can also log breaks. If we clock out of a task, we can clock back into that previous task with C-c C-x C-x

Suppose we mostly work on just a few tasks throughout the day. We can get a menu of tasks with C-u C-c C-x C-x . With this we can choose a task to clock into from recent tasks. 

If we want to see the data on the tasks we have been working on, we can do C-c C-x C-d for an overview of how much time has been spent overall on each task.

* Column View

Column view offers viewing the org file in a table structure. 

The definition can be done on a global level or a subtree level

#+COLUMNS: %58ITEM(Task) %7TODO %6CLOCKSUM(Clock)

To switch to column view, use C-c C-x C-c
If we want to leave column view, we just press q while at the heading for which it was enabled 

* Effort Estimates

org offers the EFFORT property to keep track of estimates of effort

#+PROPERTY: Effort_All 0:10 0:20 0:30 1:00 2:00 4:00 6:00 8:00

We can also add this to column view

#+COLUMNS: %58ITEM(Details) %8Effort(Time){:} %6CLOCKSUM(Clock)

** Another Task
   :PROPERTIES:
   :Effort:   0:05
   :END:
   :LOGBOOK:
   CLOCK: [2020-12-17 Thu 20:11]
   CLOCK: [2020-12-17 Thu 20:08]--[2020-12-17 Thu 20:10] =>  0:02
   :END:

** A different task                                                 :ORDERED:
   :PROPERTIES:
   :Effort:   0:30
   :ORDERED:  t
   :END:
   :LOGBOOK:
   CLOCK: [2020-12-17 Thu 20:11]--[2020-12-17 Thu 20:11] =>  0:00
   CLOCK: [2020-12-17 Thu 20:11]--[2020-12-17 Thu 20:11] =>  0:00
   :END:

#+TITLE: Linking, Attachments, and More

* Linking (internal)


